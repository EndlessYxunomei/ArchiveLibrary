// <auto-generated />
using System;
using ArchiveDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArchiveDB.Migrations
{
    [DbContext(typeof(ArchiveDbContext))]
    [Migration("20250622062403_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.17");

            modelBuilder.Entity("ArchiveModels.Applicability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Applicabilities");
                });

            modelBuilder.Entity("ArchiveModels.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("ArchiveModels.Copy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CopyNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CreationDocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeletionDocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("DelitionDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OriginalId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreationDocumentId");

                    b.HasIndex("DeletionDocumentId");

                    b.HasIndex("OriginalId");

                    b.ToTable("Copies");
                });

            modelBuilder.Entity("ArchiveModels.Correction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CorrectionNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OriginalId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("OriginalId");

                    b.ToTable("Corrections");
                });

            modelBuilder.Entity("ArchiveModels.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DeliveryDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DeliveryDocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("ReturnDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReturnDocumentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryDocumentId");

                    b.HasIndex("PersonId");

                    b.HasIndex("ReturnDocumentId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("ArchiveModels.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("DocumentType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("ArchiveModels.Original", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InventoryNumber")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("PageCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PageFormat")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("PersonId");

                    b.ToTable("Originals");
                });

            modelBuilder.Entity("ArchiveModels.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("CopyDeliveries", b =>
                {
                    b.Property<int>("CopyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CopyId", "DeliveryId");

                    b.HasIndex("DeliveryId");

                    b.ToTable("CopyDeliveries");
                });

            modelBuilder.Entity("OriginalApplicabilities", b =>
                {
                    b.Property<int>("ApplicabilityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OriginalId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ApplicabilityId", "OriginalId");

                    b.HasIndex("OriginalId");

                    b.ToTable("OriginalApplicabilities");
                });

            modelBuilder.Entity("ArchiveModels.Copy", b =>
                {
                    b.HasOne("ArchiveModels.Document", "CreationDocument")
                        .WithMany()
                        .HasForeignKey("CreationDocumentId");

                    b.HasOne("ArchiveModels.Document", "DeletionDocument")
                        .WithMany()
                        .HasForeignKey("DeletionDocumentId");

                    b.HasOne("ArchiveModels.Original", "Original")
                        .WithMany("Copies")
                        .HasForeignKey("OriginalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreationDocument");

                    b.Navigation("DeletionDocument");

                    b.Navigation("Original");
                });

            modelBuilder.Entity("ArchiveModels.Correction", b =>
                {
                    b.HasOne("ArchiveModels.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArchiveModels.Original", "Original")
                        .WithMany("Corrections")
                        .HasForeignKey("OriginalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Original");
                });

            modelBuilder.Entity("ArchiveModels.Delivery", b =>
                {
                    b.HasOne("ArchiveModels.Document", "DeliveryDocument")
                        .WithMany()
                        .HasForeignKey("DeliveryDocumentId");

                    b.HasOne("ArchiveModels.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArchiveModels.Document", "ReturnDocument")
                        .WithMany()
                        .HasForeignKey("ReturnDocumentId");

                    b.Navigation("DeliveryDocument");

                    b.Navigation("Person");

                    b.Navigation("ReturnDocument");
                });

            modelBuilder.Entity("ArchiveModels.Document", b =>
                {
                    b.HasOne("ArchiveModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ArchiveModels.Original", b =>
                {
                    b.HasOne("ArchiveModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("ArchiveModels.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("ArchiveModels.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.Navigation("Company");

                    b.Navigation("Document");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("CopyDeliveries", b =>
                {
                    b.HasOne("ArchiveModels.Copy", null)
                        .WithMany()
                        .HasForeignKey("CopyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CopyDelivery_Copies_CopyId");

                    b.HasOne("ArchiveModels.Delivery", null)
                        .WithMany()
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_CopyDelivery_Deliveries_DeliveryId");
                });

            modelBuilder.Entity("OriginalApplicabilities", b =>
                {
                    b.HasOne("ArchiveModels.Applicability", null)
                        .WithMany()
                        .HasForeignKey("ApplicabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OriginalApplicability_Applicabilities_ApplicabilityId");

                    b.HasOne("ArchiveModels.Original", null)
                        .WithMany()
                        .HasForeignKey("OriginalId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_ApplicabilityOriginal_Originals_OriginalId");
                });

            modelBuilder.Entity("ArchiveModels.Original", b =>
                {
                    b.Navigation("Copies");

                    b.Navigation("Corrections");
                });
#pragma warning restore 612, 618
        }
    }
}
